// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces/database/mongo_handler.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	database "github.com/kindai-csg/D-Chat/interfaces/database"
)

// MockMongoHandler is a mock of MongoHandler interface.
type MockMongoHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMongoHandlerMockRecorder
}

// MockMongoHandlerMockRecorder is the mock recorder for MockMongoHandler.
type MockMongoHandlerMockRecorder struct {
	mock *MockMongoHandler
}

// NewMockMongoHandler creates a new mock instance.
func NewMockMongoHandler(ctrl *gomock.Controller) *MockMongoHandler {
	mock := &MockMongoHandler{ctrl: ctrl}
	mock.recorder = &MockMongoHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoHandler) EXPECT() *MockMongoHandlerMockRecorder {
	return m.recorder
}

// CreateIndex mocks base method.
func (m *MockMongoHandler) CreateIndex(arg0 string, arg1, arg2 []database.KV) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndex", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndex indicates an expected call of CreateIndex.
func (mr *MockMongoHandlerMockRecorder) CreateIndex(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndex", reflect.TypeOf((*MockMongoHandler)(nil).CreateIndex), arg0, arg1, arg2)
}

// Insert mocks base method.
func (m *MockMongoHandler) Insert(arg0 string, arg1 []database.KV) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockMongoHandlerMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockMongoHandler)(nil).Insert), arg0, arg1)
}

// Find mocks base method.
func (m *MockMongoHandler) Find(arg0 string, arg1 []database.KV) ([][]database.KV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].([][]database.KV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMongoHandlerMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMongoHandler)(nil).Find), arg0, arg1)
}

// FindOne mocks base method.
func (m *MockMongoHandler) FindOne(arg0 string, arg1 []database.KV) ([]database.KV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].([]database.KV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockMongoHandlerMockRecorder) FindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockMongoHandler)(nil).FindOne), arg0, arg1)
}

// Update mocks base method.
func (m *MockMongoHandler) Update(arg0 string, arg1, arg2 []database.KV) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMongoHandlerMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMongoHandler)(nil).Update), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockMongoHandler) Delete(arg0 string, arg1 []database.KV) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockMongoHandlerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMongoHandler)(nil).Delete), arg0, arg1)
}
